{
  "name": "Notes",
  "tagline": "Notes",
  "body": "Using Your Swarm Cluster\r\n========================\r\n\r\nThis directory contains all of the files the Docker CLI will need to\r\ncommunicate with your Swarm Cluster. The included files are:\r\n\r\n* ca.pem - Certificate Authority, used by clients to validate servers\r\n* cert.pem - Client Certificate, used by clients to identify themselves to servers\r\n* key.pem - Client Private Key, used by clients to encrypt their requests\r\n* ca-key.pem - Certificate Authority Key, private file used to generate more client certificates.\r\n* docker.env - Shell environment config file\r\n\r\n\r\n使用您的群集群\r\n========================\r\n\r\n该目录包含所有泊坞窗CLI将需要的文件\r\n与你的群集群通信。所包含的文件是：\r\n\r\n* ca.pem - 证书颁发机构，客户端验证服务器使用\r\n* cert.pem - 客户端证书，客户端用来标识自己的服务器\r\n* key.pem - 客户端私钥，客户端使用加密他们的请求\r\n* CA-key.pem - 证书认证中心密钥，用来生成更多的客户端证书的私人文件。\r\n* docker.env - Shell环境配置文件\r\n\r\n\r\nConfiguring Docker CLI\r\n----------------------\r\n\r\nThe easiest way to configure the Docker CLI to communicate with the Swarm\r\nCluster is via environment variables. The provided 'docker.env' can be\r\nsourced into your environment to set the required variables. When ever you\r\nstart a new shell session you will need to source the 'docker.env' file to\r\nset the proper environment variables. You only need to do this once per\r\nsession though.\r\n配置泊坞窗CLI\r\n----------------------\r\n\r\n配置多克尔CLI的最简单方法与群进行交流\r\n群集是通过环境变量。所提供的“docker.env”可\r\n源到您的环境来设置所需的变量。当你过\r\n启动一个新的shell会话，您将需要源“docker.env'文件\r\n设置适当的环境变量。你只需要做到这一点每一次\r\n会议虽然。\r\n\r\n    $ source docker.env\r\n    $ docker info\r\n    Containers: 4\r\n    Strategy: spread\r\n    Filters: affinity, health, constraint, port, dependency\r\n    Nodes: 2\r\n     swarm-n1: 192.168.1.2:42376\r\n      └ Containers: 2\r\n      └ Reserved CPUs: 0 / 12\r\n      └ Reserved Memory: 0 B / 2.1 GiB\r\n     swarm-n2: 192.168.1.3:42376\r\n      └ Containers: 2\r\n      └ Reserved CPUs: 0 / 12\r\n      └ Reserved Memory: 0 B / 2.1 GiB\r\n\r\nWhen communicating with Swarm, the 'docker info' command will show global\r\ndetails about the cluster and specific details about each node.\r\n当群通信时，“docekr info ”命令将显示全球关于每个节点的群集和具体细节的详细信息。\r\n\r\n\r\nRunning your first container\r\n----------------------------\r\n\r\nIf you haven't sourced 'docker.env' you will need to do so before running\r\nyour first container. In this example, we will spawn a container running\r\nan interactive shell.\r\n如果你还没有来源“docker.env”，则需要在运行之前，\r\n这样做你的第一个容器。在这个例子中，我们将产生一个容器中运行交互式shell。\r\n\r\nFirst, make sure you've got the proper environment variables set by sourcing\r\n'docker.env'. Next, we will actually run the container with 'docker run --rm\r\n-it <image> <command>'. In our case, we will use the 'cirros' image, which is\r\na tiny demo image, and the '/bin/sh' command. It will take a short while for\r\nDocker to run the container but when it is done, you will have an interactive\r\nshell. To test out this container, we can run hostname, which will return the\r\nshort id of the container. The container also has network access, so you can\r\nuse ping to test networking. Lastly, to exit the container, simply issue an\r\n'exit' command.\r\n\r\n首先，确保你已经有了由采购设置适当的环境变量“docker.env”。\r\n接下来，我们将实际运行与“docker run --rm容器- it <image> <command>。在我们的例子中，我们将使用“cirros”的形象，这是\r\n一个微小的演示图像，和'/bin/sh'command。这将需要稍等片刻\r\n泊坞窗运行容器，但是当它完成，你将有一个互动\r\n贝壳。为了测试这个容器，我们可以运行的主机名，这将返回\r\n容器的短ID。该容器还具有网络接入，这样你就可以\r\n使用ping测试网络。最后，退出容器，只需发出\r\n“退出”命令。\r\n\r\n    $ source docker.env\r\n    $ docker run --rm -it cirros /bin/sh\r\n    / # hostname\r\n    7bcfb8c82455\r\n    / #  ping -c 4 8.8.8.8\r\n    PING 8.8.8.8 (8.8.8.8): 56 data bytes\r\n    64 bytes from 8.8.8.8: seq=0 ttl=42 time=9.457 ms\r\n    64 bytes from 8.8.8.8: seq=1 ttl=42 time=9.633 ms\r\n    64 bytes from 8.8.8.8: seq=2 ttl=42 time=9.527 ms\r\n    64 bytes from 8.8.8.8: seq=3 ttl=42 time=9.654 ms\r\n\r\n    --- 8.8.8.8 ping statistics ---\r\n    4 packets transmitted, 4 packets received, 0% packet loss\r\n    round-trip min/avg/max = 9.457/9.567/9.654 ms\r\n    / #  exit\r\n\r\nAnd, with that you've successfully used a Docker container! You can find more\r\ndetails on available Docker CLI commands in their [documentation](https://docs.docker.com/reference/commandline/cli/ \"Docker CLI Documentation\").\r\n关于完成使用 Docker container 你可以着更多详细信息 在有效的 Docker CLI command \r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}